{"version":3,"sources":["components/utils/ErrorComponent.js","components/utils/LoadingComponent.js","redux/ActionTypes.js","redux/ActionCreators.js","components/basic.js","components/HomeComponent.js","components/ThemeContext.js","components/utils/Switch.js","components/HeaderComponent.js","components/CountryDetailComponent.js","components/MainComponent.js","redux/auth.js","redux/countries.js","redux/country.js","App.js","redux/configureStore.js","registerServiceWorker.js","reportWebVitals.js","index.js"],"names":["Error","message","style","display","gridTemplateRows","placeContent","placeItems","className","Loading","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOAD_COUNTRIES","LOAD_COUNTRIES_ERROR","LOADING_COUNTRIES","LOAD_COUNTRY","LOAD_COUNTRY_ERROR","LOADING_COUNTRY","fetchInformation","url","fetch","then","response","ok","json","errMessage","loadingCountries","type","ActionTypes","loadCountries","region","data","payload","loadCountriesError","loadingCountry","loadCountry","loadCountryError","BASE_URL","RenderCountry","country","history","id","useHistory","handleOnClick","useCallback","key","push","onClick","alpha3Code","src","flag","alt","name","population","capital","RenderCountries","countries","countriy_list","slice","map","element","Home","dispatch","useDispatch","useSelector","state","useState","dropboxVisible","setDropboxVisible","useEffect","store","catch","error","selectedRegion","console","log","fetchCountriesByRegion","CountyListItem","value","FilterDropList","list","index","is_loading","Fragment","Button","width","onSubmit","event","preventDefault","document","querySelector","searchCountriesByName","placeholder","classList","toggle","ThemeContext","React","createContext","dark","Consumer","ThemeProvider","props","window","localStorage","getItem","setDark","useLayoutEffect","lastTheme","applyTheme","darkTheme","lightTheme","theme","getElementsByTagName","cssText","join","Provider","setItem","children","Switch","useContext","Header","Navbar","Component","CountryDetail","country_id","useParams","code","borders","length","bordersQuery","info","borderList","BorderList","items","select_country","goBack","nativeName","topLevelDomain","currencies","languages","subregion","withRouter","auth","TransitionGroup","CSSTransition","classNames","timeout","path","component","to","default_user","displayName","Auth","isLoading","isAuthenticated","user","errMess","action","token","init_state","Countries","Country","createStore","combineReducers","applyMiddleware","thunk","logger","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4594ef71.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Error = ({message}) => {\n    return(\n        <div style={{ \n            display: 'grid', gridTemplateRows: '300px 1fr', placeContent: 'center', placeItems: 'center'\n        }} className=\"message-info\">\n            <span className=\"fa fa-times fa-3x fa-fw text-primary\"></span>\n            <p>{message}</p>\n        </div>\n\n    );\n};","import React from 'react';\n\nexport const Loading = () => {\n    return(\n        <div style={{ \n            display: 'grid', gridTemplateRows: '300px 1fr', placeContent: 'center', placeItems: 'center'\n        }} className=\"message-info\">\n            <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\"></span>\n            <p>Loading . . .</p>\n        </div>\n        \n      \n    );\n};","export const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\n\nexport const LOAD_COUNTRIES = 'LOAD_COUNTRIES';\nexport const LOAD_COUNTRIES_ERROR = 'LOAD_COUNTRIES_ERROR';\nexport const LOADING_COUNTRIES = 'LOADING_COUNTRIES';\n\nexport const LOAD_COUNTRY = 'LOAD_COUNTRY';\nexport const LOAD_COUNTRY_ERROR = 'LOAD_COUNTRY_ERROR';\nexport const LOADING_COUNTRY = 'LOADING_COUNTRY';","import * as ActionTypes from './ActionTypes';\n\nexport const postFeedback = (feedback) => (dispatch) => {\n        \n     console.log('Feedback', feedback); \n     alert('Thank you for your feedback!'); \n};\n\nconst fetchInformation = (url) => {\n     return fetch(url)\n     .then(response => {\n          if (response.ok) {\n               return response.json();\n          } else {\n               var errMessage = new Error();\n               errMessage.message = `unable to get data from ${url}`;\n               throw errMessage;\n          }\n     })\n}\n\n// let url = `https://restcountries.eu/rest/v2/regionalbloc/${region}?fields=name;capital;currencies;nativeName;topLevelDomain;population;region;subregion;languages;borders;flag`;\n\nexport const fetchCountries = () => (dispatch, store) => {\n     let url = `https://restcountries.eu/rest/v2/all?fields=name;capital;population;region;flag;alpha3Code`;\n     dispatch(loadingCountries());\n     return fetchInformation(url)\n     .then(data => dispatch(loadCountries('all', data)))\n     .catch(error => dispatch(loadCountriesError(error.message)))\n}\n\nexport const fetchCountriesByRegion = (region) => (dispatch, store) => {\n     let url = `https://restcountries.eu/rest/v2/region/${region}?fields=name;capital;population;region;flag;alpha3Code`;\n     dispatch(loadingCountries());\n     return fetchInformation(url)\n     .then(data => dispatch(loadCountries(region, data)))\n     .catch(error => dispatch(loadCountriesError(error.message)))\n}\n\n\nexport const searchCountriesByName = (name) => (dispatch, store) => {\n     let url = `https://restcountries.eu/rest/v2/name/${name}?fields=name;capital;population;region;flag;alpha3Code`;\n     dispatch(loadingCountries());\n     return fetchInformation(url)\n     .then(data => dispatch(loadCountries(`filtered by ${name}`, data)))\n     .catch(error => dispatch(loadCountriesError(error.message)))\n}\n\nconst loadingCountries = () => {\n     return {\n          type: ActionTypes.LOADING_COUNTRIES\n     }\n}\n\nconst loadCountries = (region, data) => {\n     return {\n          type: ActionTypes.LOAD_COUNTRIES,\n          payload: {region, data}\n     }\n}\n\nconst loadCountriesError = (message) => (\n     {\n          type: ActionTypes.LOAD_COUNTRIES_ERROR,\n          payload: message\n     }\n)\n\nexport const fetchCountryByCode = (code) => (dispatch, store) => {\n     let url = `https://restcountries.eu/rest/v2/alpha?codes=${code}&fields=name;capital;currencies;nativeName;topLevelDomain;population;region;subregion;languages;borders;flag`\n     dispatch(loadingCountry());\n     return fetchInformation(url)\n     .then(data => {\n          data = data[0];\n          if (data.borders.length > 0) {\n               const bordersQuery = data.borders.join(';');\n               let url = `https://restcountries.eu/rest/v2/alpha?codes=${bordersQuery}&fields=name`;\n               fetchInformation(url)\n               .then(info => {\n                    data.borderList = info;\n                    dispatch(loadCountry(data));\n               })\n          }\n          else {\n               data.borderList = [];\n          }\n          dispatch(loadCountry(data));\n\n     })\n     .catch(error => dispatch(loadCountryError(error.message)))\n}\n\nconst loadingCountry = () => {\n     return {\n          type: ActionTypes.LOADING_COUNTRY\n     }\n}\n\nconst loadCountry = (data) => {\n     return {\n          type: ActionTypes.LOAD_COUNTRY,\n          payload: data\n     }\n}\n\nconst loadCountryError = (message) => (\n     {\n          type: ActionTypes.LOAD_COUNTRY_ERROR,\n          payload: message\n     }\n)\n","export const BASE_URL = \"/rest-countries-api-with-color-theme-switcher\";","import React, { useCallback, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button } from 'reactstrap';\n\nimport { Error } from './utils/ErrorComponent';\nimport { Loading } from './utils/LoadingComponent';\nimport { useHistory } from 'react-router-dom';\nimport { searchCountriesByName, fetchCountriesByRegion, fetchCountries } from '../redux/ActionCreators';\nimport { BASE_URL } from './basic';\n\nconst RenderCountry = ({country, id}) => {\n    const history = useHistory();\n    const handleOnClick = useCallback(\n        (key) => {\n            history.push(`${BASE_URL}/country/${key}`)\n        },\n        [history],\n    )\n    \n\n    return (\n        <div className=\"country-card\"  onClick={() => handleOnClick(country.alpha3Code)}>\n            <div className=\"country-card-header\">\n                <img src={`${country.flag}`} alt={country.name}></img>\n            </div>\n            <div className=\"country-card-body\">\n                <p>{country.name}</p>\n                <p><span>Population: </span>{country.population}</p>\n                <p><span>Region: </span>{country.region}</p>\n                <p><span>Capital: </span>{country.capital}</p>\n            </div>\n\n        </div>\n    )\n}\n\nconst RenderCountries = ({countries}) => {\n\n    const page_count = 8;\n    const current_page = 1;\n    const start_index = (current_page - 1) * page_count;\n\n    const countriy_list = countries.slice(start_index, page_count).map((element, key) => {\n        return (\n            <RenderCountry country={element} key={start_index + key} id={start_index + key}  />\n        )\n    });\n\n    return (\n        <div className=\"countries-section\" >\n            {countriy_list}\n        </div>\n    )\n}\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const countries = useSelector(state => state.countries);\n    const [dropboxVisible, setDropboxVisible] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        dispatch(fetchCountries());\n      }, [dispatch]);\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        var name = document.querySelector(\"#search-country-input\").value;\n        dispatch(searchCountriesByName(name));\n    }\n\n    const selectedRegion = (region) => {\n        console.log(region);\n        dispatch(fetchCountriesByRegion(region));\n        setDropboxVisible(false);\n    }\n\n    const toggleDropbox = () => {\n        setDropboxVisible(!dropboxVisible);\n        console.log('toggle dropbox '+ dropboxVisible);\n        document.querySelector('.filter-dropbox').classList.toggle('show');\n    }\n\n    const CountyListItem = ({value}) => (\n        <li onClick={() => selectedRegion(value)} ><button>{value}</button></li>\n    )\n\n    const FilterDropList = () => {\n        let regionList = ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania'];\n        const list = regionList.map((value, index) => (\n            <CountyListItem key={index} value={value} />\n        ))\n        return (\n            <ul>\n            {list}\n            </ul>\n        )\n    }\n\n    if (countries.is_loading ) {\n        return(<Loading />)\n    } else if (countries.error) {\n        return (\n            <React.Fragment>\n                <Error message={countries.error} />\n                <div style={{ display: 'flex', placeContent: 'center' }}>\n                    <Button onClick={() => history.push(`${BASE_URL}`)} style={{ width: '100px'}} >Go Home</Button>\n                </div>\n\n            </React.Fragment>\n        )\n    } else {\n        return(\n            <React.Fragment>\n                <div className=\"search-bar\">\n                    <div className=\"search-input\">\n                        <i className=\"fa fa-search\"></i>\n                        <form onSubmit={onSubmit}>\n                            <input type=\"text\" id=\"search-country-input\" placeholder=\"Search for a country...\"/>\n                        </form>\n                    </div>\n                    <div className=\"filter-region\">\n                        <div className=\"filter-box\">\n                            <p className=\"filter-content\">{countries.region}</p>\n                            <i className={`fa ${dropboxVisible? \"fa-chevron-down\": \"fa-chevron-up\"}`} onClick={() => toggleDropbox()}></i>\n                        </div>\n                        <div className={`filter-dropbox ${dropboxVisible? \"show\": \"\"}`}>\n                                <FilterDropList />\n                        </div>\n                    </div>\n                </div>\n                <RenderCountries countries={countries.countries} />\n            </React.Fragment>\n        );\n    }\n   \n  }\n\nexport default Home; ","import React, { useState, useLayoutEffect } from 'react';\n\nconst ThemeContext = React.createContext({\n  dark: false,\n  toggle: () => {},\n});\n\nexport default ThemeContext;\n\nexport const ThemeConsumer = ThemeContext.Consumer;\n\nexport function ThemeProvider (props) {\n  // keeps state of the current chosen theme\n  const [dark, setDark] = useState(window.localStorage.getItem('darkTheme'));\n  \n  // paints the app before it renders elements\n  useLayoutEffect(() => {\n    const lastTheme = window.localStorage.getItem('darkTheme');\n    \n    if (lastTheme === 'true') {\n      setDark(true);\n      applyTheme(darkTheme);\n    }\n\n    if (!lastTheme || lastTheme === 'false') {\n      setDark(false);\n      applyTheme(lightTheme);\n    } \n  // if state changes, repaints the app\n  }, [dark]);\n  \n  const applyTheme = theme => {\n    const root = document.getElementsByTagName('html')[0];\n    root.style.cssText = theme.join(';');\n  }\n\n  const toggle = () => {\n    const body = document.getElementsByTagName('body')[0];\n    body.style.cssText = 'transition: background .5s ease';\n    setDark(!dark);\n    window.localStorage.setItem('darkTheme', !dark);\n  };\n  \n  return (<ThemeContext.Provider value={{\n    dark,\n    toggle,\n  }}>\n    {props.children}\n  </ThemeContext.Provider>)\n}\n\n// styles\nconst lightTheme = [\n  '--element: hsl(0, 0%, 100%)',\n  '--input: hsl(0, 0%, 52%)',\n  '--text: hsl(200, 15%, 8%)',\n  '--background: hsl(0, 0%, 98%)',\n];\n\nconst darkTheme = [\n  '--element: hsl(209, 23%, 22%)',\n  '--input: hsl(0, 0%, 100%)',\n  '--text: hsl(0, 0%, 100%)',\n  '--background: hsl(207, 26%, 17%)',\n];","import React, { useContext } from 'react';\n\nimport ThemeContext from '../ThemeContext';\n\nexport default function Switch () {\n  const { dark, toggle } = useContext(ThemeContext);\n  \n  return (\n    <button \n      className='theme-switch'\n      onClick={() => toggle()}\n    >\n      <i className={`fa ${dark? \"fa-moon-o\" : \"fa-sun-o\"}`}></i><span>Dark Mode</span>\n    </button>\n  );\n} ","import React, { Component } from 'react';\nimport { Navbar } from 'reactstrap';\nimport Switch from './utils/Switch';\n\nclass Header extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n\n    }\n\n\n    render() {\n\n        return(\n            <header>\n                <Navbar>\n                        <div className=\"nav-logo-title\">\n                            <p>Where in the world?</p>\n                        </div>\n                       <Switch />                       \n                </Navbar>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { fetchCountryByCode } from \"../redux/ActionCreators\";\nimport { Error } from './utils/ErrorComponent';\nimport { Loading } from './utils/LoadingComponent';\nimport { Button } from 'reactstrap';\nimport { BASE_URL } from './basic';\n\nconst CountryDetail = () => {\n    const country = useSelector(state => state.country);\n    let {country_id} = useParams();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchCountryByCode(country_id));\n\n    }, [dispatch, country_id])\n\n    const history = useHistory();\n\n\n    const goBack = () => {\n        history.goBack();\n    }\n\n    const BorderList = ({items}) => {\n        if (!items) {\n            return (<React.Fragment></React.Fragment>)\n        }\n\n        return (\n            <span>\n                {items.map((element, key) => {\n                   return (<span key={key} className=\"border-country\">{element.name}</span>)\n                })}\n            </span>\n        )\n    }\n\n    if (country.is_loading ) {\n        return(<Loading />)\n    } else if (country.error) {\n        return (\n            <React.Fragment>\n            <Error message={country.error} />\n            <div style={{ display: 'flex', placeContent: 'center' }}>\n                <Button onClick={() => history.push(`${BASE_URL}`)} style={{ width: '100px'}} >Go Home</Button>\n            </div>\n\n        </React.Fragment>\n\n        )\n    } else {\n        const select_country = country.country;\n    return (\n        <div>\n            <div className=\"detail-header\">\n                <button onClick={() => goBack()}>\n                    <i className=\"fa fa-long-arrow-left\"><span>Back</span></i>\n                </button>\n            </div>\n            <div className=\"detail-section\">\n                <div className=\"country-flag\">\n                    <img src={select_country.flag} alt={select_country.name}></img>\n                </div>\n                <div className=\"country-details\">\n                    <p className=\"country-name\">{select_country.name}</p>\n                    <p><span>Native Name: </span>{select_country.nativeName}</p>\n                    <p><span>Top Level Domain: </span>{select_country.topLevelDomain.join('')}</p>\n                    <p><span>Population: </span>{select_country.population}</p>\n                    <p><span>Currencies: </span>{select_country.currencies[0].name}</p>\n                    <p><span>Region: </span>{select_country.region}</p>\n                    <p><span>Languages: </span>{select_country.languages[0].name}</p>\n                    <p><span>Sub Region: </span>{select_country.subregion}</p>\n                    <p><span>Capital: </span>{select_country.capital}</p>\n                    <p><span>Border Countries: </span><BorderList items={select_country.borderList}/></p>\n                </div>\n            </div>\n        </div>\n    )\n    }\n}\n\nexport default CountryDetail;","import React, { } from \"react\";\nimport { Switch, Route, Redirect, withRouter } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport \"../scss/App.scss\";\nimport Home from \"./HomeComponent\";\nimport Header from \"./HeaderComponent\";\nimport CountryDetail from \"./CountryDetailComponent\";\nimport { BASE_URL } from './basic';\n\nlet Main = () => {\n  const auth = useSelector((state) => state.auth);\n\n  return (\n    <React.Fragment>\n      <Header auth={auth} />\n      <TransitionGroup>\n        <CSSTransition classNames=\"page\" timeout={300}>\n          <Switch>\n            <Route path={`${BASE_URL}/home`} component={Home} />\n            <Route path={`${BASE_URL}/country/:country_id`} component={CountryDetail} />\n            <Redirect to={`${BASE_URL}/home`}  />\n          </Switch>\n        </CSSTransition>\n      </TransitionGroup>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(Main);\n","import * as ActionTypes from './ActionTypes';\n\nconst default_user = {\n    displayName: 'default_user',\n}\n// The auth reducer. The starting state sets authentication\n// based on a token being in local storage. In a real app,\n// we would also want a util to check if the token is expired.\nexport const Auth = (state = {\n        isLoading: false,\n        isAuthenticated: true,\n        user: default_user,\n        errMess: null\n    }, action) => {\n    switch (action.type) {\n        case ActionTypes.LOGIN_REQUEST:\n            return {...state,\n                isLoading: true,\n                isAuthenticated: false,\n            };\n        case ActionTypes.LOGIN_SUCCESS:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: true,\n                errMess: '',\n                user: action.user\n            };\n        case ActionTypes.LOGIN_FAILURE:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: false,\n                errMess: action.message\n            };\n        case ActionTypes.LOGOUT_REQUEST:\n            return {...state,\n                isLoading: true,\n                isAuthenticated: true\n            };\n        case ActionTypes.LOGOUT_SUCCESS:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: false,\n                token: '',\n                user: null\n            };\n        default:\n            return state\n    }\n}","import * as ActionTypes from './ActionTypes';\n\nconst init_state = {\n    is_loading: false,\n    error: null,\n    countries: [],\n    region: 'all'\n}\n\nexport const Countries = (state = init_state, action) => {\n    switch (action.type) {\n        case ActionTypes.LOAD_COUNTRIES:\n            return {\n                ...state,\n                is_loading: false,\n                countries: action.payload.data,\n                region: action.payload.region,\n            }\n\n        case ActionTypes.LOAD_COUNTRIES_ERROR:\n            return {\n                ...state,\n                is_loading: false,\n                countries: [],\n                region: 'all',\n                error: action.payload\n            }\n\n        case ActionTypes.LOADING_COUNTRIES:\n            return {\n                ...state,\n                is_loading: true,\n                error: null,\n            }\n    \n        default:\n            return state;\n    }\n}","import * as ActionTypes from './ActionTypes';\n\nconst Country = (state = {\n    is_loading: true,\n    errMessage: null,\n    country: null\n}, action) => {\n    switch (action.type) {\n        case ActionTypes.LOAD_COUNTRY:\n            return {\n                ...state,\n                is_loading: false,\n                country: action.payload,\n            }\n\n        case ActionTypes.LOAD_COUNTRY_ERROR:\n            return {\n                ...state,\n                is_loading: false,\n                country: null,\n                error: action.payload\n            }\n\n        case ActionTypes.LOADING_COUNTRY:\n            return {\n                ...state,\n                is_loading: true,\n                error: null,\n            }\n    \n        default:\n            return state;\n    }\n}\n\nexport default Country;","\nimport React, {  } from 'react';\nimport Main from './components/MainComponent';\nimport { ThemeProvider } from './components/ThemeContext';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\nconst store = ConfigureStore();\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <ThemeProvider>\n    <BrowserRouter>\n        <Main />\n    </BrowserRouter>\n    </ThemeProvider>\n    \n  </Provider>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport { Auth } from './auth';\nimport { Countries } from './countries';\nimport Country from './country';\n\nexport const ConfigureStore = () => {\n    const store = createStore(\n        combineReducers({\n            auth: Auth,\n            countries: Countries,\n            country: Country,\n        }),\n        applyMiddleware(thunk, logger)\n    );\n\n    return store;\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\n            );\n          });\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\n\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nregisterServiceWorker();\n"],"sourceRoot":""}